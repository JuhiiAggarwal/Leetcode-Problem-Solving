 Problem 1:   https://leetcode.com/problems/two-sum/

Solution1 :
                class Solution {
                public int[] twoSum(int[] nums, int target) {
                        int n=nums.length-1;
                        
                       for(int i=0;i<=n-1;i++){
                           for(int k=i+1;k<=n;k++){
                               if(nums[i]+nums[k]==target)
                               {
                                   return new int[]{i,k};
                               }
                           }
                       }
                           return new int[]{ };
                }
            }

 Solution 2:
              public class Solution {
              public int[] twoSum(int[] numbers, int target) {
              HashMap<Integer,Integer> indexMap = new HashMap<Integer,Integer>();
              for(int i = 0; i < numbers.length; i++){
              Integer requiredNum = (Integer)(target - numbers[i]);
               if(indexMap.containsKey(requiredNum)){
                int toReturn[] = {indexMap.get(requiredNum), i};
                return toReturn;
                   }
                 indexMap.put(numbers[i], i);
                   }
                  return null;
                    }
                  }


Problem2: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

  Solution2: class Solution {
             public int maxProfit(int[] prices)
              {
             int initialPrice=prices[0];
             int maxProfit=0;
             for(int i=1;i<prices.length;i++)
             {
             if(prices[i]<initialPrice)
             {
                 initialPrice=prices[i];
             }
            else
               {
                 maxProfit= Math.max(maxProfit,prices[i]-initialPrice);
                 }
                }
                 return maxProfit;
                  }
                }


Problem3: https://leetcode.com/problems/palindrome-number/description/

Solution3:     class Solution {
                public boolean isPalindrome(int x) {
                if(x==0){
                   return true;
                }
                if(x<0||x%10==0){
                   return false;
                }
               int rev=0;
               int rem=0;
               int temp=x;
               while(temp!=0)
               {
                       rem=temp%10;
                       rev=rev*10+rem;
                       temp=temp/10;
       
               }
                if(x==rev){
                 return true;
                }
                   else{
                    return false;
                       }
               }
             }    

